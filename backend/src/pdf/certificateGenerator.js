const PDFDocument = require('pdfkit');
const QRCode = require('qrcode');

class CertificateGenerator {
  constructor() {
    this.doc = null;
  }

  // Generate retirement certificate
  async generateRetirementCertificate(data) {
    try {
      console.log('Generating retirement certificate...');
      
      this.doc = new PDFDocument({
        size: 'A4',
        margins: {
          top: 50,
          bottom: 50,
          left: 50,
          right: 50
        }
      });

      // Add certificate header
      this.addHeader();
      
      // Add certificate content
      this.addContent(data);
      
      // Add QR code
      await this.addQRCode(data);
      
      // Add footer
      this.addFooter();

      return this.doc;
    } catch (error) {
      console.error('❌ Certificate generation failed:', error);
      throw error;
    }
  }

  // Add certificate header
  addHeader() {
    this.doc
      .fontSize(24)
      .font('Helvetica-Bold')
      .text('Green Hydrogen Retirement Certificate', { align: 'center' })
      .moveDown(0.5);
    
    this.doc
      .fontSize(12)
      .font('Helvetica')
      .text('Certificate of Carbon Credit Retirement', { align: 'center' })
      .moveDown(2);
  }

  // Add certificate content
  addContent(data) {
    const { tokenId, amount, batchId, fromAddress, retirementReason, txHash } = data;
    
    this.doc
      .fontSize(14)
      .font('Helvetica-Bold')
      .text('Certificate Details:', { underline: true })
      .moveDown(0.5);

    this.doc.fontSize(12).font('Helvetica');
    
    this.addField('Certificate ID:', `CERT-${Date.now()}`);
    this.addField('Token ID:', tokenId.toString());
    this.addField('Batch ID:', batchId);
    this.addField('Amount Retired:', `${amount} kg`);
    this.addField('Retired By:', fromAddress);
    this.addField('Retirement Reason:', retirementReason || 'Carbon offset');
    this.addField('Transaction Hash:', txHash);
    this.addField('Date Issued:', new Date().toLocaleDateString());
    
    this.doc.moveDown(2);
  }

  // Add individual field
  addField(label, value) {
    this.doc
      .font('Helvetica-Bold')
      .text(label)
      .font('Helvetica')
      .text(value)
      .moveDown(0.3);
  }

  // Add QR code
  async addQRCode(data) {
    try {
      const qrData = JSON.stringify({
        type: 'retirement',
        tokenId: data.tokenId,
        batchId: data.batchId,
        txHash: data.txHash
      });

      const qrBuffer = await QRCode.toBuffer(qrData);
      
      this.doc
        .moveDown(1)
        .text('Scan to verify:', { align: 'center' })
        .moveDown(0.5);
      
      this.doc.image(qrBuffer, {
        fit: [100, 100],
        align: 'center'
      });
    } catch (error) {
      console.error('QR code generation failed:', error);
    }
  }

  // Add footer
  addFooter() {
    this.doc
      .moveDown(2)
      .fontSize(10)
      .font('Helvetica-Oblique')
      .text('This certificate verifies the retirement of green hydrogen credits on the blockchain.', { align: 'center' })
      .moveDown(0.5)
      .text('Generated by GreenChain System', { align: 'center' });
  }

  // Get PDF as buffer
  getBuffer() {
    return new Promise((resolve, reject) => {
      const chunks = [];
      this.doc.on('data', chunk => chunks.push(chunk));
      this.doc.on('end', () => resolve(Buffer.concat(chunks)));
      this.doc.on('error', reject);
      this.doc.end();
    });
  }
}

module.exports = new CertificateGenerator();